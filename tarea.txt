ruta: http://localhost:8080/tarea

Save:
	mutation {
		saveProd(data: {
		name:"iPhone 14 pro",
		description:"Phone",
		code:"test"
		thumbnail:"https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/ipâ€¦"
		price:999
		stock:8
		timeStamp:"12/3/2023, 18:50:36"
		})
		{
		name
		}
	}

Update:
	mutation {
		updateProd(code: "test", data: {
		stock:20
		})
		{
		name
		code
		stock
		}
	}

Get:
	query {
	getProds{
		name
	}
	}

lineas de codigo agregadas al index.js (75-133){
	const schema = buildSchema(`
    type Product {
        id: ID!
        name: String,
        description: String,
        code: String,
        thumbnail: String,
        price: Int,
        stock: Int,
        timeStamp: String
    }
    input ProductInput {
        name: String,
        description: String,
        code: String,
        thumbnail: String,
        price: Int,
        stock: Int,
        timeStamp: String
    }
    type Query {
        getProds(key: String, value: String): [Product]
      }
      type Mutation {
        updateProd(code: ID!, data: ProductInput): Product,
        saveProd(data: ProductInput): Product
      }
`)

const getProds = async () => {
    const prod = await productDao.getAll();
    return prod;
}

const saveProd = async ({ data }) => {
    const newProd = await productDao.save(data);
    return newProd
}

const updateProd = async ({ code, data }) => {
    const updProd = await productDao.updateProd(code, data)
    return updProd
}

app.use(
    '/graphql',
    graphqlHTTP({
        schema: schema,
        rootValue: {
            getProds,
            saveProd,
            updateProd
        },
        graphiql: true,
    })
)
app.get("/tarea", (req, res) => {
    res.render("tarea")
})
}